name: Python CI/CD Pipeline

on:
  push:
    branches:
      - main        # Trigger the workflow on push to the main branch
  pull_request:
    branches:
      - main        # Trigger the workflow on pull requests targeting the main branch

jobs:
  build:
    runs-on: ubuntu-latest

    # Step 1: Set up Python
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
     
    - name: Set up Python 3.8
      uses: actions/setup-python@v3
      with:
        python-version: '3.8'

    # Step 2: Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt  # Assuming you have a requirements.txt

    # Step 3: Run tests (using pytest for example)
    - name: Run tests
      run: |
        python -m pytest --maxfail=1 --disable-warnings -q

    # Optional: Lint code (if you use a linter like flake8)
    - name: Lint code
      run: |
        pip install flake8
        flake8 .  # Lint all Python files in the repository

    # Optional: Upload results or artifacts (like test results)
    - name: Upload test results
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: test-results/  # Specify the directory or files to upload

  deploy:
    runs-on: ubuntu-latest
    needs: build  # This job depends on the successful completion of the build job
    if: success()  # Ensure this only runs if the build job passes
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python 3.8
      uses: actions/setup-python@v3
      with:
        python-version: '3.8'

    # Deploy step (customize this for your environment)
    - name: Deploy to server
      run: |
        echo "Deploying to server..."
        # Example: scp your files to a server or use any deployment steps needed
        # scp -r * username@hostname:/path/to/deployment

